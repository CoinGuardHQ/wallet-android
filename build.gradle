// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionCodeApp = versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100

apply from: 'tools.gradle'
apply from: 'gradle/ci.gradle'
apply from: 'gradle/dependencies.gradle'

buildscript {
    apply from: 'ext_settings.gradle'
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'io.fabric.tools:gradle:1.21.6'
        classpath 'de.felixschulze.gradle:gradle-hockeyapp-plugin:3.5'
    }
}

def getGitSha() {
    def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}

def getGitTimestamp() {
    def p = 'git log -n 1 --format=%at'.execute([], rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}

def isCI = 'true'.equals(System.getenv('CI'))
def preDexEnabled = 'true'.equals(System.getProperty('pre-dex', 'true'))

allprojects {
    ext {
        androidApplicationId = 'com.coinguard.android'
        androidVersionCode = versionCodeApp
        androidVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner = 'android.support.test.runner.AndroidJUnitRunner'
        testApplicationId = 'com.coinguard.android.test'
        gitSha = getGitSha()
        gitTimeStamp = getGitTimestamp()
        isCiEnvironment = isCI
        isPreDexEnabled = preDexEnabled
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation,unchecked"
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
    }
}
